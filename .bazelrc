common --experimental_repo_remote_exec
build --define=tf=1

build --define=use_fast_cpp_protos=true
build --define=allow_oversize_protos=true

build --spawn_strategy=local

# Make Bazel print out all options from rc files.
build --announce_rc

# other defaults
build --apple_platform_type=macos
build --keep_going
build --cxxopt=-std=c++17
build --host_cxxopt=-std=c++17
build --enable_platform_specific_config
build --verbose_failures=true
build --genrule_strategy=local

# build --define=tsl_link_protobuf=true

# Disable enabled-by-default TensorFlow features that we don't care about.
# build --define=no_aws_support=true
# build --define=no_kafka_support=true
# build --define=no_ignite_support=true

# build --crosstool_top=//toolchain:clang_suite
# build --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
# build --action_env GCC_HOST_COMPILER_PATH="/usr/bin/x86_64-linux-gnu-gcc-9"

# Use lld
# build --linkopt=-fuse-ld=lld
build --linkopt=-fuse-ld=gold

# Adding "--cxxopt=-D_GLIBCXX_USE_CXX11_ABI=0" creates parity with TF
# compilation options. It also addresses memory use due to
# copy-on-write semantics of std::strings of the older ABI.
# build --cxxopt=-D_GLIBCXX_USE_CXX11_ABI=0

build:macos --cpu=darwin

build:linux --cpu=k8

build:asan --strip=never
build:asan --spawn_strategy=local
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
build:asan --copt -O1
build:asan --copt -g
build:asan --copt -fno-omit-frame-pointer
build:asan --copt -fno-sanitize-blacklist
build:asan --linkopt -fsanitize=address

build:dbg --copt -g
build:dbg --compilation_mode=dbg
build:dbg --per_file_copt=+tensorflow/core/kernels.*@-g0

build:optdbg --config=dbg
build:optdbg --copt -O2
build:optdbg --copt=-Wno-sign-compare
build:optdbg --host_copt=-Wno-sign-compare

build:opt --compilation_mode=opt
build:opt --copt=-march=native
build:opt --host_copt=-march=native
build:opt --copt=-Wno-sign-compare
build:opt --host_copt=-Wno-sign-compare

build:o3 --config=opt
build:o3 --copt -O3

build:ofast --config=opt
build:ofast --copt -Ofast

#### Generated by Tensorflow

# This config refers to building CUDA op kernels with nvcc.
build:cuda --repo_env TF_NEED_CUDA=1
build:cuda --crosstool_top=@local_config_cuda//crosstool:toolchain
build:cuda --@local_config_cuda//:enable_cuda

# This config refers to building CUDA op kernels with clang.
build:cuda_clang --config=cuda
build:cuda_clang --repo_env TF_CUDA_CLANG=1
build:cuda_clang --@local_config_cuda//:cuda_compiler=clang

build:tf_gpu --action_env PYTHON_BIN_PATH="/opt/conda/bin/python3"
build:tf_gpu --action_env PYTHON_LIB_PATH="/bin"
build:tf_gpu --python_path="/opt/conda/bin/python3"
build:tf_gpu --action_env PYTHONPATH="/home/axlui/p3achygo/python:/usr/lib/llvm-12/bin:/home/axlui/.local/bin:/usr/local/cuda/bin:/opt/conda/bin:/opt/conda/condabin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/usr/local/go/bin"
build:tf_gpu --define=with_xla_support=true
build:tf_gpu --action_env TF_CUDA_VERSION="11"
build:tf_gpu --action_env TF_CUDNN_VERSION="8"
build:tf_gpu --action_env CUDA_TOOLKIT_PATH="/usr/local/cuda-11.3"
build:tf_gpu --action_env CUDNN_INSTALL_PATH="/usr/local/cuda"
build:tf_gpu --action_env TF_CUDA_COMPUTE_CAPABILITIES="7.5"
build:tf_gpu --action_env LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/nccl2/lib:/usr/local/cuda/extras/CUPTI/lib64"
build:tf_gpu --action_env GCC_HOST_COMPILER_PATH="/usr/bin/x86_64-linux-gnu-gcc-9"
build:tf_gpu --action_env CLANG_CUDA_COMPILER_PATH="/usr/lib/llvm-12/bin/clang"
build:tf_gpu --config=cuda
# build:tf_gpu --config=cuda_clang

build:tensorrt --repo_env TF_NEED_TENSORRT=1
