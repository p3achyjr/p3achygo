common --experimental_repo_remote_exec

### COPIED FROM tensorflow.bazelrc ###
# Default build options. These are applied first and unconditionally.

# For projects which use TensorFlow as part of a Bazel build process, putting
# nothing in a bazelrc will default to a monolithic build. The following line
# opts in to modular op registration support by default.
# build --define framework_shared_object=true
# build --define tsl_protobuf_header_only=true

build --define=use_fast_cpp_protos=true
build --define=allow_oversize_protos=true

build --spawn_strategy=local
build -c opt

# Make Bazel print out all options from rc files.
build --announce_rc

# TODO(mihaimaruseac): Document this option or remove if no longer needed
build --define=grpc_no_ares=true

# See https://github.com/bazelbuild/bazel/issues/7362 for information on what
# --incompatible_remove_legacy_whole_archive flag does.
# This flag is set to true in Bazel 1.0 and newer versions. We tried to migrate
# Tensorflow to the default, however test coverage wasn't enough to catch the
# errors.
# There is ongoing work on Bazel team's side to provide support for transitive
# shared libraries. As part of migrating to transitive shared libraries, we
# hope to provide a better mechanism for control over symbol exporting, and
# then tackle this issue again.
#
# TODO: Remove this line once TF doesn't depend on Bazel wrapping all library
# archives in -whole_archive -no_whole_archive.
build --noincompatible_remove_legacy_whole_archive

# Enable XLA support by default.
build --define=with_xla_support=true

# Disable AWS/HDFS support by default
build --define=no_aws_support=true
build --define=no_hdfs_support=true

# TF now has `cc_shared_library` targets, so it needs the experimental flag
# TODO(rostam): Remove when `cc_shared_library` is enabled by default
build --experimental_cc_shared_library

# cc_shared_library ensures no library is linked statically more than once.
build --experimental_link_static_libraries_once=false

### END COPIED FROM tensorflow.bazelrc ###

# other defaults
build --apple_platform_type=macos
build --keep_going
build --cxxopt=-std=c++17
build --host_cxxopt=-std=c++17
build --enable_platform_specific_config
build --verbose_failures=true
build --genrule_strategy=local

# build --define=tsl_link_protobuf=true

# Disable enabled-by-default TensorFlow features that we don't care about.
# build --define=no_aws_support=true
# build --define=no_kafka_support=true
# build --define=no_ignite_support=true

build --crosstool_top=//toolchain:clang_suite
# build --host_crosstool_top=@bazel_tools//tools/cpp:toolchain

# Use lld
build --linkopt=-fuse-ld=lld

# Adding "--cxxopt=-D_GLIBCXX_USE_CXX11_ABI=0" creates parity with TF
# compilation options. It also addresses memory use due to
# copy-on-write semantics of std::strings of the older ABI.
# build --cxxopt=-D_GLIBCXX_USE_CXX11_ABI=0

build:macos --cpu=darwin

build:linux --cpu=k8

build:asan --strip=never
build:asan --spawn_strategy=local
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
build:asan --copt -O1
build:asan --copt -g
build:asan --copt -fno-omit-frame-pointer
build:asan --copt -fno-sanitize-blacklist
build:asan --linkopt -fsanitize=address

build:debug --copt -g
build:debug --copt -fstandalone-debug
build:debug --compilation_mode=dbg

build:opt --compilation_mode=opt
build:opt --copt=-march=native
build:opt --host_copt=-march=native

build:o3 --config=opt
build:o3 --copt -O3

build:ofast --config=opt
build:ofast --copt -Ofast

#### Generated by Tensorflow

# This config refers to building CUDA op kernels with nvcc.
build:cuda --repo_env TF_NEED_CUDA=1
build:cuda --crosstool_top=@local_config_cuda//crosstool:toolchain
build:cuda --@local_config_cuda//:enable_cuda

build:tf_gpu --action_env PYTHON_BIN_PATH="/opt/conda/bin/python3"
build:tf_gpu --action_env PYTHON_LIB_PATH="/bin"
build:tf_gpu --python_path="/opt/conda/bin/python3"
build:tf_gpu --action_env PYTHONPATH="/home/axlui/p3achyGo/python:/usr/lib/llvm-12/bin:/home/axlui/.local/bin:/usr/local/cuda/bin:/opt/conda/bin:/opt/conda/condabin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/usr/local/go/bin"
build:tf_gpu --define=with_xla_support=true
build:tf_gpu --action_env TF_CUDA_VERSION="11"
build:tf_gpu --action_env TF_CUDNN_VERSION="8"
build:tf_gpu --action_env CUDA_TOOLKIT_PATH="/usr/local/cuda-11.3"
build:tf_gpu --action_env CUDNN_INSTALL_PATH="/usr/local/cuda"
build:tf_gpu --action_env TF_CUDA_COMPUTE_CAPABILITIES="7.5"
build:tf_gpu --action_env LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/nccl2/lib:/usr/local/cuda/extras/CUPTI/lib64"
build:tf_gpu --action_env GCC_HOST_COMPILER_PATH="/usr/bin/x86_64-linux-gnu-gcc-9"
build:tf_gpu --config=cuda
