#ifndef SELFPLAY_GO_EXPLOIT_BUFFER_H_
#define SELFPLAY_GO_EXPLOIT_BUFFER_H_

#include "absl/container/inlined_vector.h"
#include "absl/synchronization/mutex.h"
#include "cc/constants/constants.h"
#include "cc/core/ring_buffer.h"
#include "cc/game/game.h"

namespace selfplay {

struct InitState {
  game::Board board;
  absl::InlinedVector<game::Move, constants::kMaxGameLen> last_moves;
  game::Color color_to_move;
  int move_num;
};

/* Thin threadsafe wrapper around RingBuffer */
class GoExploitBuffer final {
 public:
  GoExploitBuffer() = default;
  ~GoExploitBuffer() = default;

  void Add(InitState state) {
    absl::MutexLock l(&mu_);
    buffer_.Append(state);
  }

  std::optional<InitState> Get() {
    absl::MutexLock l(&mu_);
    return buffer_.PopRandom();
  }

 private:
  core::RingBuffer<InitState, constants::kGoExploitBufferSize> buffer_
      ABSL_GUARDED_BY(mu_);
  absl::Mutex mu_;
};

}  // namespace selfplay

#endif
